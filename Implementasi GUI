import tkinter as tk
from tkinter import messagebox

class Mobil:
    def __init__(self, id_mobil, merk, model, tahun, harga_sewa, tersedia=True):
        self.id_mobil = id_mobil
        self.merk = merk
        self.model = model
        self.tahun = tahun
        self.harga_sewa = harga_sewa
        self.tersedia = tersedia
    
    def __repr__(self):
        status = "Tersedia" if self.tersedia else "Disewa"
        return f"{self.id_mobil}: {self.merk} {self.model} ({self.tahun}) - {self.harga_sewa}/hari [{status}]"

class Penyewaan:
    def __init__(self, id_sewa, id_mobil, nama_penyewa, tanggal_sewa):
        self.id_sewa = id_sewa
        self.id_mobil = id_mobil
        self.nama_penyewa = nama_penyewa
        self.tanggal_sewa = tanggal_sewa
    
    def __repr__(self):
        return f"ID Sewa: {self.id_sewa}, ID Mobil: {self.id_mobil}, Nama Penyewa: {self.nama_penyewa}, Tanggal Sewa: {self.tanggal_sewa}"

class SistemRental:
    def __init__(self):
        self.daftar_mobil = []
        self.daftar_sewa = []

    def tambah_mobil(self, mobil):
        self.daftar_mobil.append(mobil)

    def lihat_mobil(self):
        return self.daftar_mobil

    def update_mobil(self, id_mobil, merk=None, model=None, tahun=None, harga_sewa=None):
        for mobil in self.daftar_mobil:
            if mobil.id_mobil == id_mobil:
                if merk:
                    mobil.merk = merk
                if model:
                    mobil.model = model
                if tahun:
                    mobil.tahun = tahun
                if harga_sewa:
                    mobil.harga_sewa = harga_sewa
                return mobil
        return None

    def hapus_mobil(self, id_mobil):
        self.daftar_mobil = [mobil for mobil in self.daftar_mobil if mobil.id_mobil != id_mobil]

    def bubble_sort_by_harga(self):
        n = len(self.daftar_mobil)
        for i in range(n):
            for j in range(0, n-i-1):
                if self.daftar_mobil[j].harga_sewa > self.daftar_mobil[j+1].harga_sewa:
                    self.daftar_mobil[j], self.daftar_mobil[j+1] = self.daftar_mobil[j+1], self.daftar_mobil[j]

    def binary_search_by_id(self, id_mobil):
        self.daftar_mobil.sort(key=lambda x: x.id_mobil)  # Pastikan daftar sudah terurut
        low, high = 0, len(self.daftar_mobil) - 1
        while low <= high:
            mid = (low + high) // 2
            if self.daftar_mobil[mid].id_mobil == id_mobil:
                return self.daftar_mobil[mid]
            elif self.daftar_mobil[mid].id_mobil < id_mobil:
                low = mid + 1
            else:
                high = mid - 1
        return None

    def sewa_mobil(self, id_sewa, id_mobil, nama_penyewa, tanggal_sewa):
        mobil = self.binary_search_by_id(id_mobil)
        if mobil and mobil.tersedia:
            mobil.tersedia = False
            sewa = Penyewaan(id_sewa, id_mobil, nama_penyewa, tanggal_sewa)
            self.daftar_sewa.append(sewa)
            return sewa
        return None

    def lihat_penyewaan(self):
        return self.daftar_sewa

class RentalApp:
    def __init__(self, root):
        self.sistem_rental = SistemRental()
        self.root = root
        self.root.title("Sistem Rental Mobil")

        self.create_widgets()

    def create_widgets(self):
        # Frame for car management
        frame_mobil = tk.Frame(self.root, padx=10, pady=10)
        frame_mobil.pack(padx=10, pady=10)

        tk.Label(frame_mobil, text="Manajemen Mobil").grid(row=0, columnspan=2)
        
        tk.Button(frame_mobil, text="Tambah Mobil", command=self.tambah_mobil).grid(row=1, column=0)
        tk.Button(frame_mobil, text="Lihat Daftar Mobil", command=self.lihat_mobil).grid(row=1, column=1)
        tk.Button(frame_mobil, text="Update Mobil", command=self.update_mobil).grid(row=2, column=0)
        tk.Button(frame_mobil, text="Hapus Mobil", command=self.hapus_mobil).grid(row=2, column=1)
        tk.Button(frame_mobil, text="Sortir Mobil berdasarkan Harga", command=self.sortir_mobil).grid(row=3, columnspan=2)
        tk.Button(frame_mobil, text="Cari Mobil berdasarkan ID", command=self.cari_mobil).grid(row=4, columnspan=2)

        # Frame for rental management
        frame_sewa = tk.Frame(self.root, padx=10, pady=10)
        frame_sewa.pack(padx=10, pady=10)

        tk.Label(frame_sewa, text="Manajemen Penyewaan").grid(row=0, columnspan=2)
        
        tk.Button(frame_sewa, text="Sewa Mobil", command=self.sewa_mobil).grid(row=1, column=0)
        tk.Button(frame_sewa, text="Lihat Daftar Penyewaan", command=self.lihat_penyewaan).grid(row=1, column=1)

    def tambah_mobil(self):
        def submit():
            try:
                id_mobil = int(entry_id_mobil.get())
                merk = entry_merk.get()
                model = entry_model.get()
                tahun = int(entry_tahun.get())
                harga_sewa = int(entry_harga_sewa.get())
                mobil = Mobil(id_mobil, merk, model, tahun, harga_sewa)
                self.sistem_rental.tambah_mobil(mobil)
                messagebox.showinfo("Info", "Mobil berhasil ditambahkan!")
                add_mobil_window.destroy()
            except Exception as e:
                messagebox.showerror("Error", f"Terjadi kesalahan: {e}")
                add_mobil_window.destroy()

        add_mobil_window = tk.Toplevel(self.root)
        add_mobil_window.title("Tambah Mobil")

        tk.Label(add_mobil_window, text="ID Mobil:").grid(row=0, column=0)
        entry_id_mobil = tk.Entry(add_mobil_window)
        entry_id_mobil.grid(row=0, column=1)

        tk.Label(add_mobil_window, text="Merk:").grid(row=1, column=0)
        entry_merk = tk.Entry(add_mobil_window)
        entry_merk.grid(row=1, column=1)

        tk.Label(add_mobil_window, text="Model:").grid(row=2, column=0)
        entry_model = tk.Entry(add_mobil_window)
        entry_model.grid(row=2, column=1)

        tk.Label(add_mobil_window, text="Tahun:").grid(row=3, column=0)
        entry_tahun = tk.Entry(add_mobil_window)
        entry_tahun.grid(row=3, column=1)

        tk.Label(add_mobil_window, text="Harga Sewa:").grid(row=4, column=0)
        entry_harga_sewa = tk.Entry(add_mobil_window)
        entry_harga_sewa.grid(row=4, column=1)

        tk.Button(add_mobil_window, text="Submit", command=submit).grid(row=5, columnspan=2)

    def lihat_mobil(self):
        daftar_mobil = self.sistem_rental.lihat_mobil()
        mobil_list = "\n".join([str(mobil) for mobil in daftar_mobil])
        messagebox.showinfo("Daftar Mobil", mobil_list)

    def update_mobil(self):
        def submit():
            try:
                id_mobil = int(entry_id_mobil.get())
                merk = entry_merk.get() or None
                model = entry_model.get() or None
                tahun = entry_tahun.get()
                tahun = int(tahun) if tahun else None
                harga_sewa = entry_harga_sewa.get()
                harga_sewa = int(harga_sewa) if harga_sewa else None
                
                updated_mobil = self.sistem_rental.update_mobil(id_mobil, merk, model, tahun, harga_sewa)
                if updated_mobil:
                    messagebox.showinfo("Info", "Mobil berhasil diupdate!")
                else:
                    messagebox.showerror("Error", "Mobil dengan ID tersebut tidak ditemukan.")
                update_mobil_window.destroy()
            except Exception as e:
                messagebox.showerror("Error", f"Terjadi kesalahan: {e}")
                update_mobil_window.destroy()

        update_mobil_window = tk.Toplevel(self.root)
        update_mobil_window.title("Update Mobil")

        tk.Label(update_mobil_window, text="ID Mobil:").grid(row=0, column=0)
        entry_id_mobil = tk.Entry(update_mobil_window)
        entry_id_mobil.grid(row=0, column=1)

        tk.Label(update_mobil_window, text="Merk (kosongkan jika tidak diubah):").grid(row=1, column=0)
        entry_merk = tk.Entry(update_mobil_window)
        entry_merk.grid(row=1, column=1)

        tk.Label(update_mobil_window, text="Model (kosongkan jika tidak diubah):").grid(row=2, column=0)
        entry_model = tk.Entry(update_mobil_window)
        entry_model.grid(row=2, column=1)

        tk.Label(update_mobil_window, text="Tahun (kosongkan jika tidak diubah):").grid(row=3, column=0)
        entry_tahun = tk.Entry(update_mobil_window)
        entry_tahun.grid(row=3, column=1)

        tk.Label(update_mobil_window, text="Harga Sewa (kosongkan jika tidak diubah):").grid(row=4, column=0)
        entry_harga_sewa = tk.Entry(update_mobil_window)
        entry_harga_sewa.grid(row=4, column=1)

        tk.Button(update_mobil_window, text="Submit", command=submit).grid(row=5, columnspan=2)

    def hapus_mobil(self):
        def submit():
            try:
                id_mobil = int(entry_id_mobil.get())
                self.sistem_rental.hapus_mobil(id_mobil)
                messagebox.showinfo("Info", "Mobil berhasil dihapus!")
                hapus_mobil_window.destroy()
            except Exception as e:
                messagebox.showerror("Error", f"Terjadi kesalahan: {e}")
                hapus_mobil_window.destroy()

        hapus_mobil_window = tk.Toplevel(self.root)
        hapus_mobil_window.title("Hapus Mobil")

        tk.Label(hapus_mobil_window, text="ID Mobil:").grid(row=0, column=0)
        entry_id_mobil = tk.Entry(hapus_mobil_window)
        entry_id_mobil.grid(row=0, column=1)

        tk.Button(hapus_mobil_window, text="Submit", command=submit).grid(row=1, columnspan=2)

    def sortir_mobil(self):
        self.sistem_rental.bubble_sort_by_harga()
        messagebox.showinfo("Info", "Mobil berhasil disortir berdasarkan harga sewa!")

    def cari_mobil(self):
        def submit():
            try:
                id_mobil = int(entry_id_mobil.get())
                hasil_pencarian = self.sistem_rental.binary_search_by_id(id_mobil)
                if hasil_pencarian:
                    messagebox.showinfo("Info", f"Mobil ditemukan: {hasil_pencarian}")
                else:
                    messagebox.showerror("Error", "Mobil dengan ID tersebut tidak ditemukan.")
                cari_mobil_window.destroy()
            except Exception as e:
                messagebox.showerror("Error", f"Terjadi kesalahan: {e}")
                cari_mobil_window.destroy()

        cari_mobil_window = tk.Toplevel(self.root)
        cari_mobil_window.title("Cari Mobil")

        tk.Label(cari_mobil_window, text="ID Mobil:").grid(row=0, column=0)
        entry_id_mobil = tk.Entry(cari_mobil_window)
        entry_id_mobil.grid(row=0, column=1)

        tk.Button(cari_mobil_window, text="Submit", command=submit).grid(row=1, columnspan=2)

    def sewa_mobil(self):
        def submit():
            try:
                id_sewa = int(entry_id_sewa.get())
                id_mobil = int(entry_id_mobil.get())
                nama_penyewa = entry_nama_penyewa.get()
                tanggal_sewa = entry_tanggal_sewa.get()
                sewa = self.sistem_rental.sewa_mobil(id_sewa, id_mobil, nama_penyewa, tanggal_sewa)
                if sewa:
                    messagebox.showinfo("Info", "Mobil berhasil disewa!")
                else:
                    messagebox.showerror("Error", "Mobil tidak tersedia atau tidak ditemukan.")
                sewa_mobil_window.destroy()
            except Exception as e:
                messagebox.showerror("Error", f"Terjadi kesalahan: {e}")
                sewa_mobil_window.destroy()

        sewa_mobil_window = tk.Toplevel(self.root)
        sewa_mobil_window.title("Sewa Mobil")

        tk.Label(sewa_mobil_window, text="ID Sewa:").grid(row=0, column=0)
        entry_id_sewa = tk.Entry(sewa_mobil_window)
        entry_id_sewa.grid(row=0, column=1)

        tk.Label(sewa_mobil_window, text="ID Mobil:").grid(row=1, column=0)
        entry_id_mobil = tk.Entry(sewa_mobil_window)
        entry_id_mobil.grid(row=1, column=1)

        tk.Label(sewa_mobil_window, text="Nama Penyewa:").grid(row=2, column=0)
        entry_nama_penyewa = tk.Entry(sewa_mobil_window)
        entry_nama_penyewa.grid(row=2, column=1)

        tk.Label(sewa_mobil_window, text="Tanggal Sewa (YYYY-MM-DD):").grid(row=3, column=0)
        entry_tanggal_sewa = tk.Entry(sewa_mobil_window)
        entry_tanggal_sewa.grid(row=3, column=1)

        tk.Button(sewa_mobil_window, text="Submit", command=submit).grid(row=4, columnspan=2)

    def lihat_penyewaan(self):
        daftar_sewa = self.sistem_rental.lihat_penyewaan()
        sewa_list = "\n".join([str(sewa) for sewa in daftar_sewa])
        messagebox.showinfo("Daftar Penyewaan", sewa_list)

if __name__ == "__main__":
    root = tk.Tk()
    app = RentalApp(root)
    root.mainloop()
